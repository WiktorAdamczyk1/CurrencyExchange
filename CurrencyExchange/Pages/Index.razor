@page "/"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@inject IHttpContextAccessor _httpContextAccessor
@inject ICurrencyDetailsData _currencyDetailsData
@inject IExchangeWalletData _exchangeWallet
@inject IUserWalletsData _userWallet
@inject IUserCurrencySettingsData _userCurrencySettings
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{

    <div>
        <div class="inline-table center">
            <table class="table center">
                <thead>
                    <tr>
                        <th colspan="4" class="table-header">Currencies</th>
                    </tr>
                </thead>
                <thead>
                    <tr class="grey-row">
                        <th>
                            Currency
                        </th>
                        <th>
                            Unit
                        </th>
                        <th>
                            Value
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (authenticated)
                    {
                        foreach (var currency in currenciesDetails)
                        {
                            if (currency.Code != "PLN" && Convert.ToBoolean(userCurrencySettings.GetType().GetProperty(currency.Code).GetValue(userCurrencySettings, null)))
                            {
                                var curr = currency;
                                <tr>
                                    <td>
                                        @currency.Code
                                    </td>
                                    <td>
                                        @currency.Unit
                                    </td>
                                    <td>
                                        @currency.PurchasePrice.ToString("F")
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>Buy(curr)" disabled="@tradingDisabled">Buy</button>
                                    </td>
                                </tr>
                            }
                        }

                    }
                    else
                    {
                        foreach (var currency in currenciesDetails)
                        {
                            if (currency.Code != "PLN")
                            {
                                var curr = currency;
                                <tr>
                                    <td>
                                        @currency.Code
                                    </td>
                                    <td>
                                        @currency.Unit
                                    </td>
                                    <td>
                                        @currency.PurchasePrice.ToString("F")
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="LogInPrompt" disabled="@tradingDisabled">Buy</button>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    <tr>
                        <td colspan="5"></td>
                    </tr>
                    <tr>
                        <td colspan="5">
                            Last Value Update: @currenciesDetails.FirstOrDefault().Timestamp@*.AddHours(2)*@<br>
                            Available PLN: @exchangeWallet.PLN.ToString("F")
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="inline-table center">
            <table class="table center">
                <thead>
                    @if (authenticated)
                    {
                        <tr>
                            <th colspan="5" class="table-header">My Wallet</th>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <th colspan="5" class="table-header">Log in to see your wallet</th>
                        </tr>
                    }

                </thead>
                <thead>
                    <tr class="grey-row">
                        <th>
                            Currency
                        </th>
                        <th>
                            Unit price
                        </th>
                        <th>
                            Amount
                        </th>
                        <th>
                            Value
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (authenticated)
                    {
                        foreach (var currency in currenciesDetails)
                        {
                            if (currency.Code != "PLN" && Convert.ToBoolean(userCurrencySettings.GetType().GetProperty(currency.Code).GetValue(userCurrencySettings, null)))
                            {
                                var curr = currency;
                                <tr>
                                    <td>
                                        @currency.Code
                                    </td>
                                    <td>
                                        @currency.SellPrice.ToString("F")
                                    </td>
                                    <td>
                                        @userWallet.GetType().GetProperty(currency.Code).GetValue(userWallet, null)
                                    </td>
                                    <td>
                                        @((Convert.ToDecimal(userWallet.GetType().GetProperty(currency.Code).GetValue(userWallet, null))/currency.Unit*currency.SellPrice).ToString("F"))
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>Sell(curr)" disabled="@tradingDisabled">Sell</button>
                                    </td>
                                </tr>
                            }
                        }

                    }
                    <tr>
                        <td colspan="5"></td>
                    </tr>
                    @if (authenticated)
                    {
                        <tr>
                            <td colspan="5">Available PLN: @userWallet.PLN.ToString("F")</td>
                        </tr>

                    }

                </tbody>
            </table>
        </div>
    </div>

}


@code {
    private List<CurrencyDetailsModel> currenciesDetails;
    private ExchangeWalletModel exchangeWallet;
    private UserWalletsModel userWallet;
    private UserCurrencySettingsModel userCurrencySettings = new UserCurrencySettingsModel();
    private bool authenticated = false;

    string loggedInUserId = null;
    private bool isLoading = true;

    //check this value on initialised
    bool tradingDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notification"))
            .Build();

        hubConnection.On<string>("SendMessage", async alert =>
        {
            // Check alert type
            if (alert == "updateDetails")
            {
                currenciesDetails = await _currencyDetailsData.GetNewestCurrencyDetails();
                StateHasChanged();
            }
            else if (alert == "connectionError") // halt trading
            {
                tradingDisabled = true;
                StateHasChanged();
            }
            else if(alert == "connectionResumed") // resume trading
            {
                currenciesDetails = await _currencyDetailsData.GetNewestCurrencyDetails();
                tradingDisabled = false;
                StateHasChanged();
            }
            else if(alert == "updateWallet")
            {
                exchangeWallet = await _exchangeWallet.GetExchangeWallet();
            }
            else if(alert == "transactionSuccessful") // TODO after client to server requests
            {

            }
            else if (alert == "transactionFailed") //TODO
            {

            }

        });

        await hubConnection.StartAsync();

        authenticated = _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated;
        currenciesDetails = await _currencyDetailsData.GetNewestCurrencyDetails();
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        if (authenticated)
        {
            var principal = _httpContextAccessor.HttpContext.User;
            loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

            userWallet = await _userWallet.GetUserWallet(loggedInUserId);
            userCurrencySettings = await _userCurrencySettings.GetUserCurrencySettings(loggedInUserId);
        }
        isLoading = false;
    }

    private async void Buy(CurrencyDetailsModel currency)
    {
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        userWallet = await _userWallet.GetUserWallet(loggedInUserId);
        var exchangeCurrBalance = Convert.ToInt32(exchangeWallet.GetType().GetProperty(currency.Code).GetValue(exchangeWallet, null));
        var userCurrBalance = Convert.ToInt32(userWallet.GetType().GetProperty(currency.Code).GetValue(userWallet, null));
        bool enoughInExchangeWallet = exchangeCurrBalance >= currency.Unit;
        bool enoughInUserWallet = userWallet.PLN >= currency.PurchasePrice;

        // Check if user and exchange have the required balance
        if (enoughInUserWallet && enoughInExchangeWallet)
        {
            //buy
            userWallet.PLN -= currency.PurchasePrice;
            userWallet.GetType().GetProperty(currency.Code).SetValue(userWallet, userCurrBalance + currency.Unit);

            exchangeWallet.PLN += currency.PurchasePrice;
            exchangeWallet.GetType().GetProperty(currency.Code).SetValue(exchangeWallet, exchangeCurrBalance - currency.Unit);

            await _userWallet.UpdateUserWalletBalance(userWallet);
            await _exchangeWallet.UpdateExchangeWalletBalance(exchangeWallet);
        }
        else
        {
            // No funds
            await JS.InvokeVoidAsync("alert", "You or the exchange do not have the funds to make this transaction!");
        }
        StateHasChanged();
    }

    private async void Sell(CurrencyDetailsModel currency)
    {
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        userWallet = await _userWallet.GetUserWallet(loggedInUserId);
        var exchangeCurrBalance = Convert.ToInt32(exchangeWallet.GetType().GetProperty(currency.Code).GetValue(exchangeWallet, null));
        var userCurrBalance = Convert.ToInt32(userWallet.GetType().GetProperty(currency.Code).GetValue(userWallet, null));
        bool enoughInUserWallet = userCurrBalance >= currency.Unit;
        bool enoughInExchangeWallet = exchangeWallet.PLN >= currency.SellPrice;

        // Check if user and exchange have the required balance
        if (enoughInUserWallet && enoughInExchangeWallet)
        {
            //buy
            userWallet.PLN += currency.SellPrice;
            userWallet.GetType().GetProperty(currency.Code).SetValue(userWallet, userCurrBalance - currency.Unit);

            exchangeWallet.PLN -= currency.SellPrice;
            exchangeWallet.GetType().GetProperty(currency.Code).SetValue(exchangeWallet, exchangeCurrBalance + currency.Unit);

            await _userWallet.UpdateUserWalletBalance(userWallet);
            await _exchangeWallet.UpdateExchangeWalletBalance(exchangeWallet);
        }
        else
        {
            // No funds
            await JS.InvokeVoidAsync("alert", "You or the exchange do not have the funds to make this transaction!");
        }
        StateHasChanged();
    }

    private async void LogInPrompt()
    {
        await JS.InvokeVoidAsync("alert", "You are not logged in!");
    }

    private HubConnection hubConnection;
    private string input;

    public async Task Send() =>
        await hubConnection.SendAsync("SendMessage", input);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
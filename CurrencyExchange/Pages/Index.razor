@page "/"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject IExchangeRatesData _exchangeRatesData
@inject IExchangeUnitsData _exchangeUnitsData
@inject IExchangeWalletData _exchangeWallet
@inject IUserWalletsData _userWallet
@inject IUserCurrencySettingsData _userCurrencySettings
@inject IJSRuntime JS
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{

    <div>
        <div class="inline-table center">
            <table class="table center">
                <thead>
                    <tr>
                        <th colspan="4" class="table-header">Currencies</th>
                    </tr>
                </thead>
                <thead>
                    <tr class="grey-row">
                        <th>
                            Currency
                        </th>
                        <th>
                            Unit
                        </th>
                        <th>
                            Value
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (authenticated)
                    {
                        foreach (var prop in userCurrencySettings.GetType().GetProperties())
                        {
                            if (prop.PropertyType != typeof(string) && Convert.ToBoolean(prop.GetValue(userCurrencySettings)))
                            {
                                var name = prop.Name;
                                <tr>
                                    <td>
                                        @prop.Name
                                    </td>
                                    <td>
                                        @exchangeUnits.GetType().GetProperty(prop.Name).GetValue(exchangeUnits, null)
                                    </td>
                                    <td>
                                        @String.Format("{0:0.00}", exchangeRates.Last().GetType().GetProperty(prop.Name).GetValue(exchangeRates.Last(), null))
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>Buy(name)">Buy</button>
                                    </td>
                                </tr>
                            }
                        }

                    }
                    else
                    {
                        foreach (var prop in exchangeWallet.GetType().GetProperties())
                        {
                            if (prop.PropertyType != typeof(string) && prop.Name != "PLN")
                            {
                                <tr>
                                    <td>
                                        @prop.Name
                                    </td>
                                    <td>
                                        @exchangeUnits.GetType().GetProperty(prop.Name).GetValue(exchangeUnits, null)
                                    </td>
                                    <td>
                                        @String.Format("{0:0.00}", exchangeRates.Last().GetType().GetProperty(prop.Name).GetValue(exchangeRates.Last(), null))
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="LogInPrompt">Buy</button>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    <tr>
                        <td colspan="5"></td>
                    </tr>
                    <tr>
                        <td colspan="5">
                            Last Value Update: @exchangeRates.Last().GetType().GetProperty("Timestamp").GetValue(exchangeRates.Last(), null)<br>
                            Available PLN: @exchangeWallet.PLN
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="inline-table center">
            <table class="table center">
                <thead>
                    @if (authenticated)
                    {
                        <tr>
                            <th colspan="5" class="table-header">My Wallet</th>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <th colspan="5" class="table-header">Log in to see your wallet</th>
                        </tr>
                    }

                </thead>
                <thead>
                    <tr class="grey-row">
                        <th>
                            Currency
                        </th>
                        <th>
                            Unit price
                        </th>
                        <th>
                            Amount
                        </th>
                        <th>
                            Value
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (authenticated)
                    {
                        foreach (var prop in userCurrencySettings.GetType().GetProperties())
                        {
                            if (prop.PropertyType != typeof(string) && Convert.ToBoolean(prop.GetValue(userCurrencySettings)))
                            {
                                var name = prop.Name;
                                <tr>
                                    <td>
                                        @prop.Name
                                    </td>
                                    <td>
                                        @String.Format("{0:0.00}", (Convert.ToDecimal(exchangeUnits.GetType().GetProperty(prop.Name).GetValue(exchangeUnits, null)) * Convert.ToDecimal(exchangeRates.Last().GetType().GetProperty(prop.Name).GetValue(exchangeRates.Last(), null))))
                                    </td>
                                    <td>
                                        @userWallet.GetType().GetProperty(prop.Name).GetValue(userWallet, null)
                                    </td>
                                    <td>
                                        @String.Format("{0:0.00}", exchangeRates.Last().GetType().GetProperty(prop.Name).GetValue(exchangeRates.Last(), null))
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>Buy(name)">Sell</button>
                                    </td>
                                </tr>
                            }
                        }

                    }
                    <tr>
                        <td colspan="5"></td>
                    </tr>
                    @if (authenticated)
                    {
                        <tr>
                            <td colspan="5">Available PLN: @userWallet.PLN</td>
                        </tr>

                    }

                </tbody>
            </table>
        </div>
    </div>

}


@code {
    private List<ExchangeRatesModel> exchangeRates;
    private ExchangeUnitsModel exchangeUnits = new ExchangeUnitsModel();
    private ExchangeWalletModel exchangeWallet;
    private UserWalletsModel userWallet;
    private UserCurrencySettingsModel userCurrencySettings = new UserCurrencySettingsModel();
    private bool authenticated = false;

    string loggedInUserId = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        authenticated = _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated;
        exchangeRates = await _exchangeRatesData.GetExchangeRates();
        exchangeUnits = await _exchangeUnitsData.GetExchangeUnits();
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        if (authenticated)
        {
            var principal = _httpContextAccessor.HttpContext.User;
            loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

            userWallet = await _userWallet.GetUserWallet(loggedInUserId);
            userCurrencySettings = await _userCurrencySettings.GetUserCurrencySettings(loggedInUserId);
        }
        isLoading = false;
    }

    private async void Buy(string currencyName)
    {
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        userWallet = await _userWallet.GetUserWallet(loggedInUserId);
        var unitSize = Convert.ToInt32(exchangeUnits.GetType().GetProperty(currencyName).GetValue(exchangeUnits, null));
        var unitPrice = unitSize*Convert.ToDecimal(exchangeRates.Last().GetType().GetProperty(currencyName).GetValue(exchangeRates.Last(), null));
        var exchangeCurrBalance = Convert.ToInt32(exchangeWallet.GetType().GetProperty(currencyName).GetValue(exchangeWallet, null));
        var userCurrBalance = Convert.ToInt32(userWallet.GetType().GetProperty(currencyName).GetValue(userWallet, null));
        bool enoughInExchangeWallet = exchangeCurrBalance >= unitSize;
        bool enoughInUserWallet = userWallet.PLN >= unitPrice;

        // Check if user and exchange have the required balance
        if (enoughInUserWallet && enoughInExchangeWallet)
        {
            //buy
            userWallet.PLN -= unitPrice;
            userWallet.GetType().GetProperty(currencyName).SetValue(userWallet, userCurrBalance + unitSize);

            exchangeWallet.PLN += unitPrice;
            exchangeWallet.GetType().GetProperty(currencyName).SetValue(exchangeWallet, exchangeCurrBalance - unitSize);

            await _userWallet.UpdateUserWalletBalance(userWallet);
            await _exchangeWallet.UpdateExchangeWalletBalance(exchangeWallet);
        }
        else
        {
            // No funds
            await JS.InvokeVoidAsync("alert", "You or the exchange do not have the funds to make this transaction!");
        }
    }

    private async void Sell(string currencyName)
    {
        exchangeWallet = await _exchangeWallet.GetExchangeWallet();
        userWallet = await _userWallet.GetUserWallet(loggedInUserId);
        var unitSize = Convert.ToInt32(exchangeUnits.GetType().GetProperty(currencyName).GetValue(exchangeUnits, null));
        var unitPrice = unitSize * Convert.ToDecimal(exchangeRates.Last().GetType().GetProperty(currencyName).GetValue(exchangeRates.Last(), null));
        var exchangeCurrBalance = Convert.ToInt32(exchangeWallet.GetType().GetProperty(currencyName).GetValue(exchangeWallet, null));
        var userCurrBalance = Convert.ToInt32(userWallet.GetType().GetProperty(currencyName).GetValue(userWallet, null));
        bool enoughInUserWallet = userCurrBalance >= unitSize;
        bool enoughInExchangeWallet = exchangeWallet.PLN >= unitPrice;

        // Check if user and exchange have the required balance
        if (enoughInUserWallet && enoughInExchangeWallet)
        {
            //buy
            userWallet.PLN += unitPrice;
            userWallet.GetType().GetProperty(currencyName).SetValue(userWallet, userCurrBalance - unitSize);

            exchangeWallet.PLN -= unitPrice;
            exchangeWallet.GetType().GetProperty(currencyName).SetValue(exchangeWallet, exchangeCurrBalance + unitSize);

            await _userWallet.UpdateUserWalletBalance(userWallet);
            await _exchangeWallet.UpdateExchangeWalletBalance(exchangeWallet);
        }
        else
        {
            // No funds
            await JS.InvokeVoidAsync("alert", "You or the exchange do not have the funds to make this transaction!");
        }
    }


    private async void LogInPrompt()
    {
        await JS.InvokeVoidAsync("alert", "You are not logged in!");
    }
}